import asyncio
import disnake
from disnake.ext import commands
from googleapiclient.discovery import build
import os
import yt_dlp
import json
from youtubesearchpython import VideosSearch

intents = disnake.Intents.default()
intents.messages = True
intents.message_content = True
intents.members = True
bot = commands.Bot(command_prefix="/", intents=intents, help_command=None)

allowed_user_id = 
message_sent = False
role_id = 
allowed_role_id = 
music_urls = [
    "https://www.youtube.com/watch?v=dQw4w9WgXcQ",
    "https://www.youtube.com/watch?v=3JWTaaS7LdU",
    "https://www.youtube.com/watch?v=kJQP7kiw5Fk",
]
radio_file = "radio_stations.json"


def load_radio_stations():
    try:
        with open(radio_file, "r") as file:
            return json.load(file)
    except FileNotFoundError:
        return {}


def save_radio_stations(radio_stations):
    with open(radio_file, "w") as file:
        json.dump(radio_stations, file)


radio_stations = load_radio_stations()


async def download_audio(url):
    ydl_opts = {'format': 'bestaudio', 'outtmpl': 'video.mp3'}
    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        ydl.download([url])


class VerifyModal(disnake.ui.Modal):
    def __init__(self, code):
        self.code = code
        components = [
            disnake.ui.TextInput(label="–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥", placeholder=self.code, custom_id="code")
        ]
        super().__init__(title="–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è", components=components, custom_id="verify_modal")

    async def callback(self, interaction: disnake.ModalInteraction) -> None:
        if self.code == int(interaction.text_values["code"]):
            role = interaction.guild.get_role(1220453536689815592)  # ID –≤–∞—à–µ–π —Ä–æ–ª–∏
            await interaction.author.remove_roles(role)
            await interaction.response.send_message("–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é!", ephemeral=True)
            # –í—ã–¥–∞—á–∞ —Ä–æ–ª–∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
            verified_role = interaction.guild.get_role(1220453555543081021)  # ID –≤–∞—à–µ–π —Ä–æ–ª–∏
            await interaction.author.add_roles(verified_role)
        else:
            await interaction.response.send_message("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥!", ephemeral=True)


class ButtonView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    @disnake.ui.button(label="–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è", style=disnake.ButtonStyle.green, custom_id="button1")
    async def button1(self, button: disnake.ui.Button, interaction: disnake.Interaction):
        import random
        code = random.randint(1000, 9999)
        await interaction.response.send_modal(VerifyModal(code))


class Verify(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.persistents_views_added = False

    @bot.slash_command(description="–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
    async def verify(self, ctx):
        embed = disnake.Embed(color=0x2F3136)
        embed.set_image(url='https://i.imgur.com/2vWxaNL.png')
        await ctx.send(embed=embed, view=ButtonView())

    @commands.Cog.listener()
    async def on_connect(self):
        if self.persistents_views_added:
            return

        self.bot.add_view(ButtonView(), message_id=...)


@bot.slash_command(description="–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–æ–≤–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É —Å–µ—Ä–≤–µ—Ä–∞.")
async def welcome(ctx, member: disnake.Member):
    embed = disnake.Embed(
        title="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –Ω–∞—à —Å–µ—Ä–≤–µ—Ä!",
        description=f"–ü—Ä–∏–≤–µ—Ç, {member.mention}! –†–∞–¥—ã –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –∑–¥–µ—Å—å. –ù–∞–¥–µ–µ–º—Å—è, —á—Ç–æ —Ç–µ–±–µ –∑–¥–µ—Å—å –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è!",
        color=0x00ff00
    )
    await member.send(embed=embed)
    await ctx.send(f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫—É {member.mention}.")


@bot.slash_command(description="–†–µ–∫–ª–∞–º–∞ –≤–∏–¥–µ–æ —Å YouTube.")
async def advert(ctx, url: str, channel: disnake.TextChannel):
    allowed_role = ctx.guild.get_role(allowed_role_id)
    if allowed_role in ctx.author.roles:
        youtube = build('youtube', 'v3', developerKey='AIzaSyCcv4tjl5UmRVnRwGQA5QGG43pL_-Rtm4s')

        video_id = url.split("v=")[-1]
        request = youtube.videos().list(
            part="snippet",
            id=video_id
        )
        response = request.execute()

        if 'items' in response and response['items']:
            video_info = response['items'][0]['snippet']
            video_title = video_info['title']
            video_thumbnail = video_info['thumbnails']['default']['url']

            embed = disnake.Embed(
                title="–ù–æ–≤–æ–µ –≤–∏–¥–µ–æ!",
                description=f"–£ –Ω–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞ –≤—ã—à–µ–ª –Ω–æ–≤—ã–π –≤–∏–¥–µ–æ! –õ–∞–π–∫ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π {ctx.guild.default_role.mention}\n[–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ]({url})",
                color=0xFF5733
            )
            embed.add_field(name="–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ:", value=f"[{video_title}]({url})", inline=False)
            embed.set_thumbnail(url=video_thumbnail)
            await channel.send(embed=embed)

            members_mention = " ".join([member.mention for member in ctx.guild.members])
            spoiler_text = f'||{members_mention}||'
            await channel.send(content=spoiler_text)

            await ctx.send(f"–†–µ–∫–ª–∞–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª {channel.mention}.")
        else:
            await ctx.send("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å—Å—ã–ª–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞ –∏ –≤–∏–¥–µ–æ –¥–æ—Å—Ç—É–ø–Ω–æ.")
    else:
        await ctx.send("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")


def cleanup(ctx):
    os.remove("video.mp3")


@bot.slash_command(description="–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –∞—É–¥–∏–æ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É URL –∏–ª–∏ –ø–æ–∏—Å–∫ –Ω–∞ YouTube.")
async def play(ctx, query_or_url: str):
    await play_audio(ctx, query_or_url)


async def check_channel_stream(channel_ids):
    youtube = build('youtube', 'v3', developerKey='AIzaSyCcv4tjl5UmRVnRwGQA5QGG43pL_-Rtm4s')
    for channel_id in channel_ids:
        request = youtube.search().list(
            part='snippet',
            channelId=channel_id,
            type='video',
            eventType='live',
            maxResults=1
        )
        response = request.execute()
        items = response.get('items', [])
        if items:
            stream_title = items[0]['snippet']['title']
            channel = bot.get_channel(1220448854168830084)  # Replace CHANNEL_ID with your channel ID
            await channel.send(f"üî¥ **{stream_title}** —Å–µ–π—á–∞—Å –≤ –ø—Ä—è–º–æ–º —ç—Ñ–∏—Ä–µ –Ω–∞ YouTube!: {channel_id}")


async def play_audio(ctx, query_or_url):
    try:
        if ctx.author.voice is None or ctx.author.voice.channel is None:
            await ctx.send("–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ.")
            return

        voice_channel = ctx.author.voice.channel
        voice_client = ctx.guild.voice_client

        if voice_client and voice_client.channel != voice_channel:
            await voice_client.move_to(voice_channel)
        elif voice_client is None:
            voice_client = await voice_channel.connect()

        if query_or_url in radio_stations.values():
            source = disnake.FFmpegPCMAudio(query_or_url)
            track_info = "–†–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏—è"
        else:
            await ctx.send("–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∞—É–¥–∏–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...")

            if query_or_url.startswith("http"):
                await download_audio(query_or_url)
                source = disnake.FFmpegPCMAudio("video.mp3")

                video_id = yt_dlp.YoutubeDL().extract_info(query_or_url, download=False)['id']
                youtube_link = f"https://www.youtube.com/watch?v={video_id}"
                track_info = f"–ê—É–¥–∏–æ –ø–æ URL: [YouTube]({youtube_link})"
            else:
                videosSearch = VideosSearch(query_or_url, limit = 1)
                result = videosSearch.result()
                if result["result"]:
                    video_url = "https://www.youtube.com/watch?v=" + result["result"][0]["id"]
                    await download_audio(video_url)
                    source = disnake.FFmpegPCMAudio("video.mp3")

                    track_info = f"–ê—É–¥–∏–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query_or_url}"
                else:
                    await ctx.send("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∏–¥–µ–æ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.")
                    return

        voice_client.play(source, after=lambda e: cleanup(ctx))

        embed = disnake.Embed(
            title="–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –º—É–∑—ã–∫–∞",
            description=f"**–¢—Ä–µ–∫:** {track_info}\n**–ó–∞–ø—Ä–æ—Å–∏–ª:** {ctx.author.display_name}",
            color=0x00ff00
        )
        await ctx.send(embed=embed)

    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞—É–¥–∏–æ: {e}")
        await ctx.send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞—É–¥–∏–æ.")


async def update_radio(ctx, action, station_name=None, station_url=None):
    if action == "add":
        if not station_name:
            await ctx.send("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏–∏:")
            try:
                response = await bot.wait_for('message', check=lambda m: m.author == ctx.author, timeout=30)
                station_name = response.content
            except asyncio.TimeoutError:
                await ctx.send("–í—Ä–µ–º—è –Ω–∞ –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏–∏ –∏—Å—Ç–µ–∫–ª–æ.")
                return

        if not station_url:
            await ctx.send("–í–≤–µ–¥–∏—Ç–µ URL-–∞–¥—Ä–µ—Å —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏–∏:")
            try:
                response = await bot.wait_for('message', check=lambda m: m.author == ctx.author, timeout=30)
                station_url = response.content
            except asyncio.TimeoutError:
                await ctx.send("–í—Ä–µ–º—è –Ω–∞ –≤–≤–æ–¥ URL-–∞–¥—Ä–µ—Å–∞ —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏–∏ –∏—Å—Ç–µ–∫–ª–æ.")
                return

        radio_stations[station_name] = station_url
        save_radio_stations(radio_stations)
        await ctx.send(f"–†–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏—è '{station_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")

    elif action == "remove":
        if station_name in radio_stations:
            del radio_stations[station_name]
            save_radio_stations(radio_stations)
            await ctx.send(f"–†–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏—è '{station_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
        else:
            await ctx.send(f"–†–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{station_name}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")


@bot.slash_command(description="–£–¥–∞–ª—è–µ—Ç —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏—é.")
async def remove_radio(ctx, station_name: str):
    if ctx.author.id != allowed_user_id:
        await ctx.send("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º.")
        return

    await remove_radio(ctx, station_name)


@bot.slash_command(description="–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏.")
async def setting(ctx, action: str, *args):
    if ctx.author.id != allowed_user_id:
        await ctx.send("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º.")
        return

    if action in ("add_radio", "remove_radio"):
        if len(args) < 1:
            await ctx.send("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏–∏.")
            return
        station_name = args[0]
        if action == "add_radio":
            if len(args) < 2:
                await ctx.send("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å URL-–∞–¥—Ä–µ—Å —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏–∏.")
                return
            station_url = args[1]
        else:
            station_url = None
        await update_radio(ctx, action.split("_")[0], station_name, station_url)
    else:
        await ctx.send("–ù–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è: add_radio, remove_radio –∏ —Ç.–¥.")


@bot.slash_command(description="–ù–∞—á–∏–Ω–∞–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏–∏.")
async def start_radio(ctx):
    radio_list = "\n".join([f"{index + 1}. {station}" for index, station in enumerate(radio_stations.keys())])
    await ctx.send(f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏—é:\n{radio_list}")

    def check(message):
        return (message.author == ctx.author and message.content.isdigit() and 1 <= int(message.content)
                <= len(radio_stations))

    try:
        response = await bot.wait_for('message', check=check, timeout=30)
        selected_station = list(radio_stations.keys())[int(response.content) - 1]
        await play(ctx, radio_stations[selected_station])
    except asyncio.TimeoutError:
        await ctx.send("–í—Ä–µ–º—è –Ω–∞ –≤—ã–±–æ—Ä —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏–∏ –∏—Å—Ç–µ–∫–ª–æ.")


@bot.slash_command(description="–ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∫–æ–º–ø–æ–∑–∏—Ü–∏—é.")
async def skip(ctx):
    voice_client = ctx.guild.voice_client
    if voice_client and voice_client.is_playing():
        voice_client.stop()
        await ctx.send("–ü–µ—Å–Ω—è –ø—Ä–æ–ø—É—â–µ–Ω–∞.")
    else:
        await ctx.send("–ù–µ—Ç –ø–µ—Å–Ω–∏, –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.")


@bot.slash_command(description="–û—Ç–∫–ª—é—á–∞–µ—Ç—Å—è –æ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞.")
async def leave(ctx):
    voice_client = ctx.guild.voice_client
    if voice_client and voice_client.is_connected():
        await voice_client.disconnect()
        await ctx.send("–ë–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω –æ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞.")
    else:
        await ctx.send("–ë–æ—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É.")


@bot.slash_command(description="–£–¥–∞–ª—è–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —á–∞—Ç–∞.")
async def clear(ctx, amount: int):
    if ctx.author.guild_permissions.manage_messages:
        if amount <= 0:
            await ctx.send("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.")
            return
        await ctx.channel.purge(limit=amount + 1)
        success_message = await ctx.send(f"–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ {amount} —Å–æ–æ–±—â–µ–Ω–∏–π.")
        await asyncio.sleep(5)
        await success_message.delete()
    else:
        await ctx.send("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")


@bot.event
async def on_ready():
    global message_sent
    print(f'–ë–æ—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ Discord –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–µ—Ç–∏ –ø–æ–¥ –∏–º–µ–Ω–µ–º {bot.user}')
    channel_ids = ['UCjBt33cBcZa7hWE8j-0Zk8g', 'UCYkZUQxBEuiw-uZ3f04z0sQ']
    await check_channel_stream(channel_ids)


@bot.event
async def on_raw_reaction_add(payload):
    if payload.message_id == 1220685091408318474:
        guild = bot.get_guild(payload.guild_id)
        role = guild.get_role(role_id)
        if role and payload.emoji.name == 'üîµ':
            member = guild.get_member(payload.user_id)
            if member:
                await member.add_roles(role)
                print(f"–†–æ–ª—å {role.name} –≤—ã–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {member.name}")
            else:
                print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {payload.user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {guild.name}")
        else:
            print("–†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∞—è —ç–º–æ–¥–∑–∏.")


@bot.event
async def on_member_join(member):
    guild = member.guild
    role = guild.get_role(1220453536689815592)
    if role is not None:
        await member.add_roles(role)
        print(f"–†–æ–ª—å {role.name} —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫—É {member.display_name}")
    else:
        print("–£–∫–∞–∑–∞–Ω–Ω–∞—è —Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")


@bot.event
async def on_member_remove(member):
    print(f'{member} –ø–æ–∫–∏–Ω—É–ª —Å–µ—Ä–≤–µ—Ä.')


bot.run('YOUR_TOKEN')
