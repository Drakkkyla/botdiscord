import asyncio
import disnake
from disnake.ext import commands
import os
import yt_dlp
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import json
from youtubesearchpython import VideosSearch
from yandex_music import ClientAsync


intents = disnake.Intents.default()
intents.all()
bot = commands.Bot(command_prefix="/", intents=intents, help_command=None)
radio_file = "radio_stations.json"
request_messages = {}
radio_playing = False
update_channel_id = 1228484399691989062
current_volume = 1.0


def read_update_file():
    if os.path.exists("update.txt"):
        with open("update.txt", "r") as file:
            return file.read().strip()
    return None


async def monitor_update_file():
    last_update = read_update_file()
    while True:
        current_update = read_update_file()
        if current_update != last_update:
            last_update = current_update
            channel = bot.get_channel(update_channel_id)
            if channel:
                await channel.send(f"üì¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ —Å–∏—Å—Ç–µ–º–µ –±–æ—Ç–∞:\n{current_update}")
            else:
                print(f"[ERROR] –ö–∞–Ω–∞–ª —Å ID {update_channel_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await asyncio.sleep(10)


scheduler = AsyncIOScheduler()
scheduler.start()

YANDEX_MUSIC_TOKEN = "YANDEX_MUSIC_SECRET_KEY"
yandex_client = None


async def initialize_yandex_client():
    global yandex_client
    try:
        print("[DEBUG] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏...")
        yandex_client = await ClientAsync(YANDEX_MUSIC_TOKEN).init()
        print("[DEBUG] –ö–ª–∏–µ–Ω—Ç –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏: {e}")


class RadioStationDropdown(disnake.ui.StringSelect):
    def __init__(self, radio_stations):
        options = [
            disnake.SelectOption(label=station_name, value=station_url, emoji="üéµ")
            for station_name, station_url in radio_stations.items()
        ]

        super().__init__(
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏—é",
            min_values=1,
            max_values=1,
            options=options,
        )

    async def callback(self, inter: disnake.MessageInteraction):
        global radio_playing
        if not radio_playing:
            voice_channel = inter.author.voice.channel

            if voice_channel:
                voice_client = inter.guild.voice_client

                if voice_client and voice_client.channel != voice_channel:
                    await voice_client.move_to(voice_channel)
                elif not voice_client:
                    await voice_channel.connect()

                station_url = self.values[0]
                await play_radio(inter, station_url)
            else:
                await inter.response.send_message("–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ.", ephemeral=True)
        else:
            await inter.response.send_message("–†–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏—è —É–∂–µ –∏–≥—Ä–∞–µ—Ç.", ephemeral=True)


class StartRadioView(disnake.ui.View):
    def __init__(self, radio_stations):
        super().__init__()

        self.add_item(RadioStationDropdown(radio_stations))

    async def on_timeout(self):
        self.clear_items()


def load_radio_stations():
    try:
        with open(radio_file, "r") as file:
            return json.load(file)
    except FileNotFoundError:
        return {}


def save_radio_stations(radio_stations_to_save):
    with open(radio_file, "w") as file:
        json.dump(radio_stations_to_save, file, indent=4)


radio_stations = load_radio_stations()

equalizer_presets = {
    "normal": "-af equalizer=f=0:width_type=h:width=200:g=0",
    "bass_boost": "-af equalizer=f=100:width_type=h:width=200:g=12",
}
current_equalizer = "normal"


def get_server_directory(guild_id):
    directory = f"server_files/{guild_id}"
    if not os.path.exists(directory):
        os.makedirs(directory)
    return directory


async def download_audio(url, guild_id):
    directory = get_server_directory(guild_id)
    file_path = os.path.join(directory, 'audio.mp3')
    ydl_opts = {
        'format': 'bestaudio',
        'outtmpl': file_path,
        'quiet': True
    }
    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        ydl.download([url])
    return file_path


async def play_radio(inter, url):
    global radio_playing
    radio_playing = True

    voice_client = inter.guild.voice_client
    if voice_client:
        voice_client.stop()
        source = disnake.FFmpegPCMAudio(url, options="-vn")
        voice_client.play(source, after=lambda e: on_radio_finish(e))

    station_info = radio_stations.get(url)
    if station_info:
        image_url = station_info.get("image_url")
        embed = disnake.Embed(
            title="–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏—è",
            description=f"**[–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏—é]({url})**",
            color=0x00ff00
        )
        if image_url:
            embed.set_image(url=image_url)
        await inter.response.send_message(
            embed=embed,
            content=f"**–°–ï–ô–ß–ê–° –ò–ì–†–ê–ï–¢:** {station_info.get('emoji', 'üéµ')} <3731_vinyl_disc>\n**–í–ö–õ–Æ–ß–ò–õ –†–ê–î–ò–û:** "
                    f"{inter.author.mention}",
            components=[create_music_control_buttons()]
        )
    else:
        await inter.response.send_message(
            content=f"**–†–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è:** {url}\n**–í–ö–õ–Æ–ß–ò–õ –†–ê–î–ò–û:** {inter.author.mention}",
            components=[create_music_control_buttons()]
        )


def on_radio_finish(e):
    global radio_playing
    radio_playing = False


def cleanup(ctx, server_directory):
    try:
        for file in os.listdir(server_directory):
            file_path = os.path.join(server_directory, file)
            if os.path.isfile(file_path):
                os.remove(file_path)
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤: {e}")


@bot.slash_command(description="–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–∏—Ç–µ –∞—É–¥–∏–æ –ø–æ URL –∏–ª–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É –Ω–∞ YouTube.")
async def play(ctx, query_or_url: str):
    await play_audio(ctx, query_or_url)


async def play_audio(ctx, query_or_url):
    try:
        if ctx.author.voice is None or ctx.author.voice.channel is None:
            await ctx.send("üéß –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ, —á—Ç–æ–±—ã —è –º–æ–≥ –≤–∫–ª—é—á–∏—Ç—å –º—É–∑—ã–∫—É. "
                           "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –∫–∞–∫–æ–º—É-–Ω–∏–±—É–¥—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!", ephemeral=True)
            return

        voice_channel = ctx.author.voice.channel
        voice_client = ctx.guild.voice_client

        if voice_client and voice_client.channel != voice_channel:
            await voice_client.move_to(voice_channel)
        elif voice_client is None:
            voice_client = await voice_channel.connect()

        server_directory = get_server_directory(ctx.guild.id)

        if query_or_url in radio_stations.values():
            current_volume = 1.0  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –≥—Ä–æ–º–∫–æ—Å—Ç—å
            source = disnake.FFmpegPCMAudio(query_or_url, options=f"-vn -af 'volume={current_volume}'")
            track_info = "üìª –†–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏—è"
        else:
            await ctx.send("üé∂ –ó–∞–≥—Ä—É–∂–∞—é –≤–∞—à—É –º—É–∑—ã–∫—É... –ù–µ–º–Ω–æ–≥–æ —Ç–µ—Ä–ø–µ–Ω–∏—è, —ç—Ç–æ –∑–∞–π–º–µ—Ç –≤—Å–µ–≥–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥!",
                           ephemeral=False)

            if query_or_url.startswith("http"):
                file_path = await download_audio(query_or_url, ctx.guild.id)
                current_volume = 1.0  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –≥—Ä–æ–º–∫–æ—Å—Ç—å
                source = disnake.FFmpegPCMAudio(file_path, options=f"-vn -af 'volume={current_volume}'")
                video_id = yt_dlp.YoutubeDL().extract_info(query_or_url, download=False)['id']
                youtube_link = f"https://www.youtube.com/watch?v={video_id}"
                track_info = f"üîó –ê—É–¥–∏–æ –ø–æ URL: [YouTube]({youtube_link})"
            else:
                videos_search = VideosSearch(query_or_url, limit=1)
                result = videos_search.result()
                if result["result"]:
                    video_url = "https://www.youtube.com/watch?v=" + result["result"][0]["id"]
                    file_path = await download_audio(video_url, ctx.guild.id)
                    current_volume = 1.0  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –≥—Ä–æ–º–∫–æ—Å—Ç—å
                    source = disnake.FFmpegPCMAudio(file_path, options=f"-vn -af 'volume={current_volume}'")
                    track_info = f"üîç –ù–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query_or_url}"
                else:
                    await ctx.send("üòï –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –º—É–∑—ã–∫—É –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ!",
                                   ephemeral=True)
                    return

        voice_client.play(source, after=lambda event: cleanup(ctx, server_directory))

        embed = disnake.Embed(
            title="üéµ –ú—É–∑—ã–∫–∞ –≤ —ç—Ñ–∏—Ä–µ!",
            description=f"**–¢—Ä–µ–∫:** {track_info}\n**–ó–∞–ø—Ä–æ—Å–∏–ª:** {ctx.author.display_name}",
            color=0x00ff00
        )
        await ctx.send(embed=embed, components=[create_music_control_buttons()])

    except Exception as e:
        print(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞—É–¥–∏–æ: {e}")
        await ctx.send("üòî –û–π! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º—É–∑—ã–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.", ephemeral=True)


@bot.slash_command(description="–ù–∞—á–∏–Ω–∞–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏–∏.")
async def start_radio(inter: disnake.ApplicationCommandInteraction):
    view = StartRadioView(radio_stations)
    await inter.response.send_message("üìª –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –º—É–∑—ã–∫–æ–π:", view=view)

    interactivity = await view.wait()
    view.stop()


@bot.slash_command(description="–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏–∏.")
async def stop_radio(ctx: disnake.ApplicationCommandInteraction):
    global radio_playing

    voice_client = ctx.guild.voice_client
    if voice_client:
        voice_client.stop()
        radio_playing = False
        await ctx.response.send_message("‚èπ –†–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –ù–∞–¥–µ–µ–º—Å—è, –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å!", ephemeral=True)
    else:
        await ctx.response.send_message("üòï –ë–æ—Ç –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ.", ephemeral=True)


@bot.slash_command(description="–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è.")
async def volume(ctx, volume: float):
    global current_volume
    current_volume = volume

    voice_client = ctx.guild.voice_client
    if voice_client and voice_client.is_playing():
        voice_client.pause()
        source = disnake.FFmpegPCMAudio(voice_client.source, options=f"-af 'volume={current_volume}'")
        voice_client.play(source)
        await ctx.send(f"üîä –ì—Ä–æ–º–∫–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {volume * 100}%")
    else:
        await ctx.send("–ù–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.")


@bot.slash_command(description="–ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∫–æ–º–ø–æ–∑–∏—Ü–∏—é.")
async def skip(ctx):
    voice_client = ctx.guild.voice_client
    if voice_client and voice_client.is_playing():
        voice_client.stop()
        await ctx.send("‚è≠Ô∏è –¢—Ä–µ–∫ –ø—Ä–æ–ø—É—â–µ–Ω! –ö–∞–∫ –Ω–∞—Å—á–µ—Ç —á–µ–≥–æ-—Ç–æ –Ω–æ–≤–µ–Ω—å–∫–æ–≥–æ?", ephemeral=True)
    else:
        await ctx.send("üòï –°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.", ephemeral=True)


@bot.slash_command(description="–û—Ç–∫–ª—é—á–∞–µ—Ç—Å—è –æ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞.")
async def leave(ctx):
    voice_client = ctx.guild.voice_client
    if voice_client and voice_client.is_connected():
        await voice_client.disconnect()
        global radio_playing
        radio_playing = False
        await ctx.send("üëã –ë–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω –æ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞. –î–æ —Å–∫–æ—Ä—ã—Ö –≤—Å—Ç—Ä–µ—á!", ephemeral=True)
    else:
        await ctx.send("üòï –ë–æ—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É.", ephemeral=True)


@bot.slash_command(description="–£–¥–∞–ª—è–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —á–∞—Ç–∞.")
async def clear(ctx, amount: int):
    if ctx.author.guild_permissions.manage_messages:
        if amount <= 0:
            await ctx.send("üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", ephemeral=True)
            return
        await ctx.channel.purge(limit=amount + 1)
        success_message = await ctx.send(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ {amount} —Å–æ–æ–±—â–µ–Ω–∏–π.", ephemeral=True)
        await asyncio.sleep(5)
        await success_message.delete()
    else:
        await ctx.send("üö´ –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", ephemeral=True)


@bot.slash_command(description="–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∑–≤—É–∫ —Å –ø–æ–º–æ—â—å—é —ç–∫–≤–∞–ª–∞–π–∑–µ—Ä–∞.")
async def equalizer(ctx, preset: str):
    await ctx.send("üîß –ö–æ–º–∞–Ω–¥–∞ —ç–∫–≤–∞–ª–∞–π–∑–µ—Ä–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é.")


async def search_yandex_track(query):
    search_result = await yandex_client.search(query)
    tracks = search_result.tracks.results if search_result.tracks else []
    return tracks


async def download_yandex_track(track, guild_id):
    directory = get_server_directory(guild_id)
    file_path = os.path.join(directory, 'yandex_audio.mp3')
    await track.download_async(file_path)
    return file_path


@bot.slash_command(description="–ò—â–µ—Ç –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç —Ç—Ä–µ–∫ —Å –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É.")
async def play_yandex(ctx, *, query: str):
    if ctx.author.voice is None or ctx.author.voice.channel is None:
        await ctx.send("üéß –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ, —á—Ç–æ–±—ã —è –º–æ–≥ –≤–∫–ª—é—á–∏—Ç—å –º—É–∑—ã–∫—É. "
                       "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –∫–∞–∫–æ–º—É-–Ω–∏–±—É–¥—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!", ephemeral=True)
        return

    voice_channel = ctx.author.voice.channel
    voice_client = ctx.guild.voice_client

    if voice_client:
        if voice_client.channel != voice_channel:
            await voice_client.move_to(voice_channel)
    else:
        try:
            voice_client = await voice_channel.connect()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É: {e}")
            await ctx.send("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.", ephemeral=True)
            return

    server_directory = get_server_directory(ctx.guild.id)

    try:
        if yandex_client is None:
            print("[ERROR] –ö–ª–∏–µ–Ω—Ç –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
            await ctx.send("üòì –ü–æ—Ö–æ–∂–µ, —É –Ω–∞—Å –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", ephemeral=True)
            return

        await ctx.send("üéß –ò—â–µ–º –≤–∞—à —Ç—Ä–µ–∫ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–µ... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ!", ephemeral=False)
        tracks = await search_yandex_track(query)

        if not tracks:
            await ctx.send("üòî –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç—Ä–µ–∫ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.", ephemeral=True)
            return

        track = tracks[0]
        file_path = await download_yandex_track(track, ctx.guild.id)
        current_volume = 1.0  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –≥—Ä–æ–º–∫–æ—Å—Ç—å
        source = disnake.FFmpegPCMAudio(file_path, options=f"-vn -af 'volume={current_volume}'")

        voice_client.play(source, after=lambda event: cleanup(ctx, server_directory))

        embed = disnake.Embed(
            title="üé∂ –ú—É–∑—ã–∫–∞ –≤ —ç—Ñ–∏—Ä–µ! –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∏–∑ –Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–∏! ‚ö°",
            description=f"**–¢—Ä–µ–∫:** {track.title}\n**–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:** {track.artists[0].name}\n**–ó–∞–ø—Ä–æ—Å–∏–ª:** "
                        f"{ctx.author.display_name}",
            color=0x00ff00
        )
        await ctx.send(embed=embed, components=[create_music_control_buttons()])

    except Exception as e:
        print(f"[ERROR] –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç—Ä–µ–∫–∞ —Å –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏: {e}")
        await ctx.send("üòï –û–π! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.", ephemeral=True)


def create_music_control_buttons():
    button_pause = disnake.ui.Button(label="‚è∏Ô∏è", style=disnake.ButtonStyle.primary, custom_id="pause")
    button_stop = disnake.ui.Button(label="‚èπÔ∏è", style=disnake.ButtonStyle.danger, custom_id="stop")
    button_skip = disnake.ui.Button(label="‚è©", style=disnake.ButtonStyle.secondary, custom_id="skip")
    button_volume_up = disnake.ui.Button(label="-", style=disnake.ButtonStyle.success, custom_id="volume_up")
    button_volume_down = disnake.ui.Button(label="-", style=disnake.ButtonStyle.success, custom_id="volume_down")

    action_row = disnake.ui.ActionRow(button_pause, button_stop, button_skip, button_volume_down, button_volume_up)
    return action_row


@bot.event
async def on_button_click(inter: disnake.MessageInteraction):
    voice_client = inter.guild.voice_client

    if voice_client is None:
        await inter.response.send_message("–ë–æ—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É.", ephemeral=True)
        return

    if inter.component.custom_id == 'pause':
        if voice_client.is_playing():
            voice_client.pause()
            await inter.response.send_message("–ú—É–∑—ã–∫–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.", ephemeral=True)
        else:
            await inter.response.send_message("–ú—É–∑—ã–∫–∞ –Ω–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è.", ephemeral=True)

    elif inter.component.custom_id == 'stop':
        if voice_client.is_playing():
            voice_client.stop()
            await voice_client.disconnect()
            await inter.response.send_message("–ú—É–∑—ã–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏ –±–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω.", ephemeral=True)
        else:
            await inter.response.send_message("–ú—É–∑—ã–∫–∞ –Ω–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è.", ephemeral=True)

    elif inter.component.custom_id == 'skip':
        if voice_client.is_playing():
            voice_client.stop()
            await inter.response.send_message("–¢–µ–∫—É—â–∏–π —Ç—Ä–µ–∫ –ø—Ä–æ–ø—É—â–µ–Ω.", ephemeral=True)
        else:
            await inter.response.send_message("–ú—É–∑—ã–∫–∞ –Ω–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è.", ephemeral=True)


@bot.event
async def on_ready():
    print(f'[INFO] –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ Discord –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–µ—Ç–∏ –ø–æ–¥ –∏–º–µ–Ω–µ–º {bot.user}')
    await initialize_yandex_client()
    await bot.loop.create_task(monitor_update_file())

bot.run('YOUR_BOT_SECRET_KEY')
